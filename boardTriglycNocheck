[[jsxgraph  width="800px" height="600px"]] 
JXG.Options.text.cssDefaultStyle = 'direction:ltr; font-family:Arial;';
JXG.Options.text.highlightCssDefaultStyle = 'direction:ltr';

//board
var board = JXG.JSXGraph.initBoard(divid, {
  boundingbox:[-15, 25, {#xmax#}, -1],
   axis: false,
  showCopyright: false,
  showNavigation: false,
  keepaspectratio: false,
  pan:{enabled:false},
  zoom:{enabled:false},
  resize: {enabled:true}
});
  var findit = function(arr, item) {
  for (var k = 0; isless(k ,arr.length); k++) { if (arr[k][0] == item) {return k} };
  return -1;
  }
var answered=false;
var cur=0;
var left = -13;
var low=[],high=[],Marks=[0,0,0],Marktxt=['','',''];

low[0] =19; low[1]=10.5 ;low[2]=2;
high[0] = low[0]+2;high[1] = low[1]+2;high[2] = low[2]+2;
  
var cMark={#cMark#},wMark={#wMark#};
var x=[],y=[];
x[0]=[left];x[1]=[left];x[2]=[left];
y[0]=[];y[1]=[];y[2]=[];

var initial={#initial#};

if (initial[0]=="low")  {y[0][0] = low[0]}  else {y[0][0] = high[0]};
if (initial[1]=="low")  {y[1][0] = low[1]}  else {y[1][0] = high[1]};
if (initial[2]=="low")  {y[2][0] = low[2]}  else {y[2][0] = high[2]};


var imup={#img1#},trimg={#trimg#};

var cis = [];
cis[0]=[]; cis[1]=[];cis[2]=[];
var  trans = [];
trans[0]=[];trans[1]=[];trans[2]=[];
var imgcup=[];
imgcup[0]=[-1.2,4];imgcup[1]=[-1.2,4];imgcup[2]=[-1.2,4];
var imgup=[];
imgup[0] = board.create('image', [imup, [function(){return imgcup[0][0]},function(){return imgcup[0][1] }], [1.58,5]],{visible:false});
imgup[1] = board.create('image', [imup, [function(){return imgcup[1][0]},function(){return imgcup[1][1] }], [1.58,5]],{visible:false});
imgup[2] = board.create('image', [imup, [function(){return imgcup[2][0]},function(){return imgcup[2][1] }], [1.58,5]],{visible:false});


var imgtri= board.create('image', [trimg, [15,1.3], [2.7,18]],{visible:true, fixed:true});

var Double={#D#},Carbon={#C#};
console.log(Double,Carbon);
 
var curve=[];
 curve[0] = board.create('curve', [x[0], y[0]],{strokeColor: 'red',strokewidth:3});
 curve[1] = board.create('curve', [x[1], y[1]],{strokeColor: 'red',strokewidth:3});
 curve[2] = board.create('curve', [x[2], y[2]],{strokeColor: 'red',strokewidth:3});


if ({#showLength#}=='yes'){  var t1 = board.create('text',[15,0,function(){return " אורך השרשרת: " +x[cur].length}]);}



var addpoint = function() {
  var temp = (y[cur][y[cur].length - 1] == low[cur]) ? high[cur] : low[cur];
  var temp2 = x[cur][x[cur].length - 1] + 1;
  y[cur].push(temp);
  x[cur].push(temp2);
}

var removepoint = function() {
if (imgup[cur].getAttribute('visible')){imgup[cur].setAttribute({visible: false})} 
  else if (y[cur].length == 1) {
if ({#initial#}=='low')  {y[cur][0] = low[cur]} else { y[cur][0]=high[cur]};
//    y[cur][0] = low;
    x[cur][0] =left;
		}
		else {
    var temp = y[cur][y[cur].length - 1]

    if (y[cur][y[cur].length - 1] == y[cur][y[cur].length - 2]) {
      var temp = cis[cur].pop();
      board.removeObject(temp);
	  } 
	else if (trans[cur].length!=0) {if (trans[cur][trans[cur].length-1][0]==y[cur].length-1) {
		var temp=trans[cur].pop();
	  board.removeObject(temp);
		}
}

   y[cur].pop();
   x[cur].pop();
}
   
}

var addcis = function() {
  var temp = y[cur][y[cur].length - 1];
  var temp2 = x[cur][x[cur].length - 1] + (high[cur] - low[cur]);

  y[cur].push(temp);
  x[cur].push(temp2);
  var last = x[cur].length - 1;
  var tx = x[cur][last];
  var dy = (y[cur][last] == high[cur]) ? -0.3 : 0.3;
  var ty = (y[cur][last]) + dy;

  var temp = board.create('segment', [
    [tx, ty],
    [tx - (high[cur] - low[cur]), ty]
  ], {
    fixed: true,
		strokeColor: 'red'
  });
  cis[cur].push(temp);
board.update();

return true;

}

var addtrans = function() {
  var last = y[cur].length - 1;
  var ty = (y[cur][last] == low[cur]) ? high[cur] : low[cur];
  var oldY = y[cur][last];
  var tx = x[cur][last];
  var slp = (y[cur][last] == low[cur]) ? 1 : -1;
  var dy = 0.3;
  y[cur].push(ty);
  x[cur].push(tx + 1);

  var seg = [];
  if (slp == 1) {
    seg = [
      [tx + dy, oldY],
      [tx + 1, ty - (high[cur]-low[cur]) * dy]
    ]
  } else {
    seg = [
      [tx, oldY - (high[cur]-low[cur]) * dy],
      [tx + 1 - dy, ty]
    ]
  }

  var t = board.create('segment', seg, {
    fixed: true,
    strokeColor: 'red'
  });
  trans[cur].push([last + 1, t]);
console.log(trans[cur]);
  board.update();
  return true;
}


var addhead = function() {
  var last = y[cur].length - 1;
 var dif = 14 - x[cur][last];
    for (let j = 0; isless(j, x[cur].length); j++) {
      x[cur][j] = x[cur][j] + dif
    }
    if (cis[cur].length != 0) {
      for (let j = 0; isless(j, cis[cur].length); j++) {
        cis[cur][j].setPosition(JXG.COORDS_BY_USER, [dif, 0])
      }
      board.update();
    }
    if (trans[cur].length != 0) {
      for (let j = 0; isless(j, trans[cur].length); j++) {
        trans[cur][j][1].setPosition(JXG.COORDS_BY_USER, [dif, 0])
      }
      board.update();
    }
var cc=Carbon[cur],row;
var ydiff;
var temp=high[cur]-low[cur];
if (y[cur][last] != high[cur])  {
for (let i = 0; isless(i, cc); i++) {
    y[cur][i]=(y[cur][i]==low[cur])? high[cur]:low[cur];
  }
    if (cis[cur].length != 0) {
      for (let j = 0; isless(j, cis[cur].length); j++) {
     let rrr=round((cis[cur][j].point1.coords.usrCoords[2]-low[cur]),2)
       ydiff =(rrr==0.3) ? (temp-0.6):(0.6-temp);
        cis[cur][j].setPosition(JXG.COORDS_BY_USER, [0, ydiff])
      }
      board.update();
    }
if (trans[cur].length != 0) {
      for (let j = 0; isless(j, trans[cur].length); j++) {
//--------------
  board.removeObject( trans[cur][j][1]);
  var lastt = trans[cur][j][0]-1;
  var ty = (y[cur][lastt] == low[cur]) ? high[cur] : low[cur];
  var oldY = y[cur][lastt];
  var tx = x[cur][lastt];
  var slp = (y[cur][lastt] == low[cur]) ? 1 : -1;
  var dy = 0.3;
  var seg = [];
  if (slp == 1) {   seg = [    [tx + dy, oldY],     [tx + 1, ty - (high[cur]-low[cur]) * dy]   ]
  } else {
    seg = [  [tx, oldY - (high[cur]-low[cur]) * dy],   [tx + 1 - dy, ty]   ]
  }
  trans[cur][j][1] = board.create('segment', seg, {
    fixed: true,
    strokeColor: 'red'
  });
//--------------

      }
      board.update();
    }
}
 
    imgup[cur].setAttribute({ visible: true});
    imgcup[cur][0] = x[cur][last] - 0.6;
    imgcup[cur][1] = y[cur][last] - 2;
    board.update();
   return true;
}

//draw what in the input fields
for (let j=0;isless(j,3);j++){
cur=j;
  for (let i =1; isless(i, Carbon[cur]); i++) { 
    var row=findit(Double[cur],i);
     if (row !=-1)  {if (Double[cur][row][1]=='cis') {addcis()} else {addtrans()}} else {addpoint()};
}
 {addhead()};
}
board.update();  


checkAnswer[{#rqm#}] =function(indx, mrk) {
Marks[indx]=Marks[indx]+mrk;
answered=true;
board.update();
}



[[/jsxgraph]]
<!---->
<script>
function iand(x,y)  {return (x&&y)};
 function isless(x,y) {return (x<y)};
  function round(num, decimalPlaces = 0) {
    var p = Math.pow(10, decimalPlaces);
    var n = (num * p) * (1 + Number.EPSILON);
    return Math.round(n) / p;
}

 </script>

<script type="text/javascript">
 var checkAnswer=[];
 </script>
